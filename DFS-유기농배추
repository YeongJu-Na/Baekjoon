import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.util.StringTokenizer;
public class test{
	static int[] dx = {1,0,-1,0};
	static int[]dy = {0,1,0,-1};
	static int[][] matrix;
	static boolean[][] visited;
	static int row;
	static int col;
	public static void main(String[] args)throws IOException{
		
		BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		while(t-->0) {
			StringTokenizer st = new StringTokenizer(br.readLine()," ");
			col = Integer.parseInt(st.nextToken());
			row = Integer.parseInt(st.nextToken());
			int ones = Integer.parseInt(st.nextToken());
			matrix = new int[row][col];
			
			for(int i=0;i<ones;i++) {
				st = new StringTokenizer(br.readLine()," ");
				int n1 = Integer.parseInt(st.nextToken());
				int n2 = Integer.parseInt(st.nextToken());
				matrix[n2][n1]=1;
			}
			visited = new boolean[row][col];
			int answer=0;
			for(int i=0;i<row;i++) {
				for(int j=0;j<col;j++) {
					if(matrix[i][j]==0 || visited[i][j]) continue;
					dfs(i,j);
					answer++;
				}
			}
			
			System.out.println(answer);
		}
	}
	static void dfs(int x, int y) {
		visited[x][y]=true;
		for(int i=0;i<3;i++) {
			int nx = x+dx[i];
			int ny = y+dy[i];
			if(nx<0||nx>=row||ny<0||ny>=col) continue;
			if(matrix[nx][ny]==0||visited[nx][ny]) continue;
			dfs(nx, ny);
		}
	}
}
