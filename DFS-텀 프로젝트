import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.util.StringTokenizer;
public class test{
	static boolean[] visited;
	static boolean[] finished;
	static int[] arr;
	static int cnt;         //사이클내에 있는 노드수! 전체에서 빼서 구함
	public static void main(String[] args)throws IOException{
		
		BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		while(t-->0) {
			int num = Integer.parseInt(br.readLine());
			StringTokenizer st = new StringTokenizer(br.readLine()," ");
			arr = new int[num+1];
			visited = new boolean[num+1];
			finished = new boolean[num+1];  //visited[next]=true, finished[next]=false라면 사이클 내에 있음
			cnt=0;
			for(int i=1;i<arr.length;i++) {
				arr[i]=Integer.parseInt(st.nextToken());
			}
			for(int i=1;i<arr.length;i++) {
				if(!visited[i]) dfs(i);
			}
			
			System.out.println(num-cnt);      //전체-싸이클내의 수
			
		}
	}
	static void dfs(int x) {
		visited[x]=true;
		int next = arr[x];
		if(visited[next]) {
			if(!finished[next]) {
				cnt++;
				while(next!=x) {
					finished[next]=true;
					next=arr[next];
					cnt++;
				}
			}
		}
		else dfs(next);
		finished[x]=true;
	}
}
