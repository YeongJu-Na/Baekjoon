///////////////////////////// 풀이 1 - 이전 연산내용 담도록 클래스 생성
import java.util.Queue;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;

public class Main{
	public static void main(String[] args)throws IOException{
		
		//런타임에러 - ArrayIndexOutOfBounds, "S"연산 시 cur값이 0이면 -1해야하는데 1일떄해서 음수값 나오고 chk에서 음의 인덱스로 접근해서
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		
		while(t-->0) {
			StringTokenizer st = new StringTokenizer(br.readLine()," ");
			int a= Integer.parseInt(st.nextToken());
			int b= Integer.parseInt(st.nextToken());
			Queue<Val>q = new LinkedList<>();             //새로운 값 생성시마다 해당 값 연산내용 함께 큐에
			boolean[] chk = new boolean[10000];
            
			q.add(new Val(a,""));
			chk[a]=true;
			String answer="";
			while(!q.isEmpty()) {
				Val cur = q.poll();
				
				int d = (cur.x*2)%10000;
				int s = (cur.x==0)?9999:cur.x-1;
				int l = (cur.x*10)%10000 + cur.x/1000;      //LEFT SHIFT
				int r = cur.x%10*1000 + cur.x/10;           //RIGHT SHIFT 
				
				if(!chk[d]) {
					if(d==b) {
						answer = cur.op+"D";
						break;
					}
					chk[d]=true;
					q.add(new Val(d,cur.op+"D"));
				}
				if(!chk[s]) {
					if(s==b) {
						answer = cur.op+"S";
						break;
					}
					chk[s]=true;
					q.add(new Val(s,cur.op+"S"));
				}
				if(!chk[l]) {
					if(l==b) {
						answer = cur.op+"L";
						break;
					}
					chk[l]=true;
					q.add(new Val(l,cur.op+"L"));
				}
				if(!chk[r]) {
					if(r==b) {
						answer = cur.op+"R";
						break;
					}
					chk[r]=true;
					q.add(new Val(r,cur.op+"R"));
				}
			}
			System.out.println(answer);
		}
	}
}
class Val{
	int x;
	String op;
	Val(int x, String op){
		this.x=x;
		this.op=op;
	}
}
///////////////////////////////// 풀이 2
import java.util.Queue;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;

public class test{
	public static void main(String[] args)throws IOException{
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		
		while(t-->0) {
			StringTokenizer st = new StringTokenizer(br.readLine()," ");
			int a= Integer.parseInt(st.nextToken());
			int b= Integer.parseInt(st.nextToken());
			Queue<Integer>q = new LinkedList<>();
			boolean[] chk = new boolean[10000];
			String[] op = new String[10000];        //모든값 만들어질때마다 그 값(인덱스)에 연산 저장
			
			q.add(a);
			chk[a]=true;
			op[a]="";
			while(!q.isEmpty() && !chk[b]) {  //각dslr연산 후 연산 내용 op에 저장하므로 코드자체는 더 간결
				int cur = q.poll();
				
				int d = (cur*2)%10000;
				int s = (cur==0)?9999:cur-1;
				int l = (cur*10)%10000 + cur/1000;
				int r = cur%10*1000 + cur/10;
				
				if(!chk[d]) {
					chk[d]=true;
					op[d]=op[cur]+"D";
					q.add(d);
				}
				if(!chk[s]) {
					chk[s]=true;
					op[s]=op[cur]+"S";
					q.add(s);
				}
				if(!chk[l]) {
					chk[l]=true;
					op[l]=op[cur]+"L";
					q.add(l);
				}
				if(!chk[r]) {
					chk[r]=true;
					op[r]=op[cur]+"R";
					q.add(r);
				}
			}
			System.out.println(op[b]);
		}
	}
}
