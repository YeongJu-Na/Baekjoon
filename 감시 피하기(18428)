import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class testclass {
    static int n;   //방 크기
    static int[][] arr;   //주어진 배열방 정보
    static ArrayList<Teacher> tt = new ArrayList<>(); //선생님열들 위치 배
    static int[] dx = {1,0,-1,0};
    static int[] dy = {0,1,0,-1};
    public static void main(String args[]) throws IOException {

        BufferedReader br=  new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        arr = new int[n][n];

        for(int i=0;i<n;i++){
            StringTokenizer st = new StringTokenizer(br.readLine());
            for(int j=0;j<n;j++){
                String str = st.nextToken();
                if(str.equals("S")) arr[i][j]=1;    //학생이면 1
                else if(str.equals("T")){
                    arr[i][j]=2;        //선생님은 2
                    tt.add(new Teacher(i,j));
                }
            }
        }
        comb(0,0);
        System.out.println("NO");
    }
    
    //장애물 설치 조합, cnt: 설치 수, idx: 설치 위치
    static void comb(int cnt, int idx){     
        if(cnt==3){         //3개 설치 시
            if(isSol()){    // 학생 미발견 시 yes 출력 후 시스템 정상 종료
                System.out.println("YES");
                System.exit(0);
            }
            return;
        }
        for(int i=idx;i<n*n;i++){
            int x = i/n;
            int y = i%n;
            if(arr[x][y]!=0) continue;
            arr[x][y]=-1;
            comb(cnt+1, i+1);
            arr[x][y]=0;
        }
    }
    
    //해당 배열에서 학생 발견 여부
    static boolean isSol(){     
        for(Teacher t: tt){     //선생님 위치 돌면서
            for(int i=0;i<4;i++){   //아래, 오른쪽, 위, 왼쪽
                int nx = t.x+dx[i];
                int ny = t.y+dy[i];
                while(isRange(nx,ny)){  //범위 내에 있는 동안
                    if(arr[nx][ny]==-1) break;  //장애물만나면 탐색 그만
                    if(arr[nx][ny]==1) return false;   //학생만나면 정답 아님(false)
                    //더 탐색 필요시, 해당 방향(i)으로 계속 이동
                    nx+=dx[i];
                    ny+=dy[i];
                }
            }
        }
        return true;
    }
    
    //행렬 범위 내의 값인지
    static boolean isRange(int x, int y){   
        if(x<0||y<0||x>=n||y>=n) return false;
        return true;
    }
}
class Teacher{
    int x;
    int y;
    Teacher(int x, int y){
        this.x=x;
        this.y=y;
    }
}
