import java.util.Queue;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;

public class test{
	public static void main(String[] args)throws IOException{
		
		int[] dx = {-2,-2,-1,-1,1,1,2,2}; //한번에 이동 가능한 위치들
		int[] dy = {-1,1,-2,2,-2,2,-1,1};
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		while(t-->0) {
			Queue<Node> q = new LinkedList<>();
			int len = Integer.parseInt(br.readLine());
			int[][] chk = new int[len][len];
			StringTokenizer st= new StringTokenizer(br.readLine()," ");
			q.add(new Node(Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken())));	//현재 나이트 위치
			st = new StringTokenizer(br.readLine()," ");
			int dest_x = Integer.parseInt(st.nextToken());
			int dest_y = Integer.parseInt(st.nextToken());
			if(q.peek().x==dest_x && q.peek().y==dest_y) {
				System.out.println(0);
				continue;
			}
			loop: while(!q.isEmpty()) {
				Node cur = q.poll();
				
				for(int i=0;i<8;i++) {
					int nx = cur.x+dx[i];
					int ny = cur.y+dy[i];
					if(nx<0||nx>=len||ny<0||ny>=len) continue;
					if(chk[nx][ny]!=0) continue;
					chk[nx][ny]=chk[cur.x][cur.y]+1;
					if(nx==dest_x && ny==dest_y) {
						break loop;
					}
					q.add(new Node(nx, ny));
				}
			}
			System.out.println(chk[dest_x][dest_y]);
		}
	}
}
class Node{
	int x;
	int y;
	Node(int x, int y){
		this.x=x;
		this.y=y;
	}
}
