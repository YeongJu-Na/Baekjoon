import java.util.Arrays;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {
	static int[] dx = {1,0,-1,0};
	static int[] dy = {0,1,0,-1};
	static int[][] arr;
	static int[] p;			////문명번호(인덱스) 별 집합 관계
	static int n;
	static Queue<Node> q;   //해당 연도에 전파된 새로운 영역(위치)
	public static void main(String[] args) throws IOException{
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		n = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(st.nextToken());
		arr=new int[n+1][n+1];
		q = new LinkedList<>();
		
		for(int i=0;i<k;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int x=Integer.parseInt(st.nextToken());
			int y=Integer.parseInt(st.nextToken());
			arr[x][y]=1;
			q.add(new Node(x,y));     //문명있는 영역 큐에 넣기
		}
		//문명 개수 세기(큐에 있는 애들 중 인접한 애들은 하나의 문명으로
		Iterator<Node> it = q.iterator();
		Queue<Node> temp = new LinkedList<>();
		boolean[][] visited=new boolean[n+1][n+1];
		int idx=1;				    //문명 인덱스
		
		while(it.hasNext()) {
			Node node = it.next();
			int x = node.x;
			int y= node.y;
			if(visited[x][y]) continue;
			visited[x][y]=true;
			arr[x][y]=idx;          //문명 번호 부여
			temp.add(new Node(x,y));      //해당위치와 인접한 애들 찾기 -> 같은 문명 번호
			while(!temp.isEmpty()) {
				Node cur = temp.poll();
				
				for(int i=0;i<4;i++) {
					int nx = cur.x+dx[i];
					int ny = cur.y+dy[i];
					if(!isRange(nx,ny)) continue;
					if(visited[nx][ny]||arr[nx][ny]==0) continue;
					arr[nx][ny]=idx;            //같은 문명 번호 부여
					visited[nx][ny]=true;
					temp.add(new Node(nx,ny));      //temp에 넣어 같은 문명번호인 위치 모두 찾기
				}
			}
			idx++;      //같은 문명 번호 끝나고 번호 추가
		}
		p = new int[idx];
		Arrays.fill(p, -1);
		int ans=0;

		while(p[1]!=-(idx-1)) {   //모두 합쳐진 경우
			bfs(q.size());        //기존에 들어있던 큐에 대해서만 상하좌우 검사 (전파)
			ans++;
		}
		System.out.println(ans);
	}
	static void bfs(int size) {  
		for(int i=0;i<size;i++) {
			Node cur = q.poll();
			int x= cur.x;
			int y= cur.y;
			int val = arr[x][y];      //전파될 문명 번호
			for(int j=0;j<4;j++) {
				int nx = x+dx[j];
				int ny = y+dy[j];
				if(!isRange(nx,ny)||arr[nx][ny]==val) continue; //이미 같은 번호라면 지나가기
				int nval=arr[nx][ny]; 
				if(nval!=0) {               //다른 문명 번호 가진 경우
					if(find(nval)==find(val)) continue;     //이미 같은 집합이므로 합칠 필요 없음
					else union(nval,val);       //합치기--> 서로 다른 문명 번호가 겹치는 경우
				}
				else {            //전파될 수 있는 위치
					arr[nx][ny]=val;      //문명 번호 전파
					adj(nx,ny);             //겹치지 않더라도 인접해서 문명 합쳐지는 경우 
          //새로 추가된 문명번호의 인접에 다른 문명번호 있다면 union가능하므로
					q.add(new Node(nx,ny));
				}
			}
		}
	}
	static void adj(int a, int b) {
		int val = arr[a][b];
		for(int i=0;i<4;i++) {
			int nx = a+dx[i];
			int ny = b+dy[i];
			if(!isRange(nx,ny)) continue;
			int nval = arr[nx][ny];
			if(nval==val||nval==0) continue;
			union(val,nval);
		}
	}
	static void union(int a, int b) {
		//a와 b는 달라야만 해당 메소드 호출
		a=find(a);
		b=find(b);
		if(a==b) return;
		if(a<b) {
			p[a]+=p[b];
			p[b]=a;
		}
		else{
			p[b]+=p[a];
			p[a]=b;
		}
	}
	static int find(int a) {
		if(p[a]<0) return a;
		return p[a]=find(p[a]);
	}
	static boolean isRange(int x, int y) {
		if(x<=0||x>n||y<=0||y>n) return false;
		return true;
	}
}
class Node{
	int x; 
	int y;
	Node(int x, int y){
		this.x=x;
		this.y=y;
	}
}
