import java.util.StringTokenizer;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.util.Queue;
import java.util.LinkedList;

public class test{
	public static void main(String[] args)throws IOException{
		int[] dx = {1,0,-1,0};
		int[] dy = {0,1,0,-1};
		Queue<Node> q = new LinkedList<>();
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		int row= Integer.parseInt(st.nextToken());
		int col= Integer.parseInt(st.nextToken());
		int[][] map = new int[row][col];        //별도 chk없이 해당위치의 행렬 값 바꾸면서 안바뀐것(==1)만 큐로
		
		for(int i=0;i<row;i++) {
			String str = br.readLine();
			for(int j=0;j<col;j++) {
				map[i][j]=Integer.parseInt(str.split("")[j]); 
			}
		}
		q.add(new Node(0,0));
		
		loop: while(!q.isEmpty()) {
			Node cur = q.poll();
			
			for(int i=0;i<4;i++) {
				int nx = cur.x+dx[i];
				int ny = cur.y+dy[i];
				if(nx<0||nx>=row||ny<0||ny>=col||(nx==0&&ny==0)) continue;  //범위 밖, 출발지 제외
				if(map[nx][ny]!=1)continue;           //이미 방문한 경우 지나감
				map[nx][ny] = map[cur.x][cur.y]+1;      //칸수 증가
				if(nx==row-1&&ny==col-1) break loop;
				q.add(new Node(nx,ny));
			}
		}
		System.out.println(map[row-1][col-1]);
		
	}
}
class Node{
	int x;
	int y;
	Node(int x, int y){
		this.x=x;
		this.y=y;
	}
}
