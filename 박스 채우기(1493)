import java.io.*;
import java.util.*;

public class testclass {
    public static void main(String args[]) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int l = Integer.parseInt(st.nextToken());
        int w = Integer.parseInt(st.nextToken());
        int h = Integer.parseInt(st.nextToken());

        int n = Integer.parseInt(br.readLine());

        int[] cubes = new int[20];
        for(int i=0;i<n;i++){
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            cubes[a]=b;
        }
        long ans = 0;
        long bef = 0;    // 박스에 담긴 큐브 수

        for(int i=n-1;i>=0;i--){

            // 현재 단계의 큐브 8개 == 이전 단계의 큐브 1개 --> 한 단계 줄어들때마다 8배씩
            bef *= 8;
            if(cubes[i]==0) continue;   // 큐브가 없으면

            // 현재 사이즈의 큐브로 박스 채울 때, 필요한 개수 - 이전단계에서 채운 개수
            long cnt = (long)(l>>i)*(h>>i)*(w>>i)-bef;
            // 주어진 큐브 수가 필요한 큐브 수(cnt)보다 작을 수 있으므로
            cnt = Math.min(cnt,cubes[i]);

            bef += cnt;
            ans += cnt;
        }
        if(bef!=(long)l*w*h) ans = -1;

        bw.write(ans + "\n");
        bw.flush();
        br.close();
        bw.close();

    }
}
