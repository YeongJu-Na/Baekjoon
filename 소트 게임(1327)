import java.util.HashSet;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;

public class test{
	static int n, k;
	public static void main(String[] args)throws IOException{
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		n = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		
		String str = br.readLine().replace(" ", "");
		
		Queue<Arr> q = new LinkedList<>();
		int answer= -1;
		q.add(new Arr(str,0));
		HashSet<String> hs = new HashSet<>(); //이미 검사한 값인지 알기 위해
		hs.add(str);
		
		char[] strarr=str.toCharArray();
		Arrays.sort(strarr);
		String ans= new String(strarr);       //오름차순일 때
		
		while(!q.isEmpty()) {
			Arr cur =q.poll();
			
			if(cur.str.equals(ans)) {
				answer=cur.cnt;
				break;
			}
			
			for(int i=0;i<=n-k;i++) {
				String temp = reverse(cur.str,i);
				if(hs.contains(temp)) continue;
				q.add(new Arr(temp,cur.cnt+1));
				hs.add(temp);
			}
		}
		System.out.println(answer);
		
		
	}
	static String reverse(String str, int start) {    //start부터 k개 뒤집기
		StringBuilder sb = new StringBuilder();
		sb.append(str.substring(start,start+k));
		sb.reverse();
		if(start!=0) sb.insert(0, str.subSequence(0, start));
		if(start!=n-k) sb.append(str.substring(start+k));
		return sb.toString();
	}
}
class Arr{
	String str;
	int cnt;
	Arr(String str, int cnt){
		this.str=str;
		this.cnt=cnt;
	}
}
