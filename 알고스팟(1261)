import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;

public class Main{
	static final int INF= 10000;
	public static void main(String[] args)throws IOException{
		int[] dx = {0,1,0,-1};
		int[] dy = {1,0,-1,0};
		BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st =new StringTokenizer(br.readLine()," ");
		int col = Integer.parseInt(st.nextToken());
		int row = Integer.parseInt(st.nextToken());
		int[][] matrix = new int[row][col];
		int[][] dist = new int[row][col];
		boolean[][] visited = new boolean[row][col];    //없어도 가능, 백준 시간 비교- 4ms정도 차이남
		
		for(int i=0;i<row;i++) {
			String[] s=br.readLine().split("");
			for(int j=0;j<col;j++) matrix[i][j]=Integer.parseInt(s[j]);
			Arrays.fill(dist[i], INF);
		}
		dist[0][0]=0;
		
		PriorityQueue<Node>pq = new PriorityQueue<>();
		pq.add(new Node(0,0,0));
		while(!pq.isEmpty()) {
			Node cur = pq.poll();
			
			if(visited[cur.x][cur.y]) continue;
			visited[cur.x][cur.y]=true;
			
			for(int i=0;i<4;i++) {
				int nx = cur.x+dx[i];
				int ny = cur.y+dy[i];
				if(nx<0||nx>=row||ny<0||ny>=col) continue;
				if(matrix[nx][ny]+dist[cur.x][cur.y] < dist[nx][ny]) {
					dist[nx][ny]=matrix[nx][ny]+dist[cur.x][cur.y];
					pq.add(new Node(nx,ny,dist[nx][ny]));
				}
			}
		}
		System.out.println(dist[row-1][col-1]);
		
	}
}
class Node implements Comparable<Node>{
	int x;
	int y;
	int cost;
	Node(int x, int y, int cost){
		this.x=x;
		this.y=y;
		this.cost=cost;
	}
	public int compareTo(Node o) {
		return this.cost-o.cost;
	}
}
