import java.util.StringTokenizer;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;

public class test{
	static char[][] arr;
	static int r,c,max;
	static int[] dx= {0,1,0,-1};
	static int[] dy= {1,0,-1,0};
	static boolean[] alphabet=new boolean[26];
	public static void main(String[] args)throws IOException{
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		r = Integer.parseInt(st.nextToken());
		c = Integer.parseInt(st.nextToken());
		visited= new boolean[r][c];
		arr = new char[r][c];
		for(int i=0;i<r;i++) {
			arr[i] = br.readLine().toCharArray();
		}
		max=1;
		dfs(0,0,1);
		System.out.println(max);
		
	}
	static void dfs(int x, int y,int cnt) {
		alphabet[arr[x][y]-'A']=true;
		//if(str.indexOf(arr[x][y])!=-1) return;  
   //탐색후 사용된 알파벳들 str으로 넘겨서 indexOf메소드 -> 너무 느림 -> 각 알파벳(26개)에 대한 bool배열로
		max = Math.max(cnt, max);
		for(int i=0;i<4;i++) {
			int nx = x+dx[i];
			int ny = y+dy[i];
			if(nx<0||ny<0||nx>=r||ny>=c) continue;
			if(!alphabet[arr[nx][ny]-'A']) dfs(nx, ny,cnt+1);
		}
		alphabet[arr[x][y]-'A']=false;      //탐색 전 상태로 
	}
}
