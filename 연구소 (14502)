import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class testclass {
    static int[] dx = {1,0,-1,0};
    static int[] dy = {0,1,0,-1};
    static int ans=0;
    static int n, m;
    public static void main(String args[])throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        int[][] arr = new int[n][m];
        //0: 빈칸, 1:벽, 2:바이러스
        for (int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < m; j++) {
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        comb(arr,0,0);
        System.out.println(ans);
    }
    //안전 영역의 크기 구하기
    static int SafetyArea(int[][] arr){
        Queue<Node> q = new LinkedList<>();
        boolean[][] chk = new boolean[n][m];
        int ret = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(arr[i][j]!=0||chk[i][j]) continue; //새로운 안전영역인 경우
                int temp = 1;   //해당 영역의 개수
                boolean flag=false;
                q.add(new Node(i,j));
                chk[i][j]=true;

                while(!q.isEmpty()){
                    Node cur = q.poll();
                    for(int k=0;k<4;k++){
                        int nx = cur.x+dx[k];
                        int ny = cur.y+dy[k];
                        if(nx<0||ny<0||nx>=n||ny>=m) continue;
                        if(chk[nx][ny]||arr[nx][ny]==1) continue;
                        if(arr[nx][ny]==2){ //바이러스 있는 곳이면
                            flag = true;
                            continue;
                        }
                        chk[nx][ny]=true;
                        q.add(new Node(nx,ny));
                        temp++;
                    }
                }
                if(!flag) ret+=temp;  //바이러스없는, 안전영역일 경우만 추가
            }
        }
        return ret;

    }
    //벽 설치할 수 있는 
    static void comb(int[][] arr, int idx, int cnt){
        if(cnt==3){   //설치한 벽의 개수가 3개일 때
            ans = Math.max(SafetyArea(arr),ans);
            return;
        }
        //굳이 인덱스 신경쓸필요 없이 이중for문으로 그냥 해도됨!
        for(int i=idx;i<m*n;i++){
            int r = i/m;
            int c = i%m;
            if(arr[r][c]!=0)  continue;
            arr[r][c]=1;
            comb(arr,idx+1,cnt+1);
            arr[r][c]=0;
        }
    }
}
class Node{
    int x;
    int y;
    Node(int x, int y){
        this.x=x;
        this.y=y;
    }
}
