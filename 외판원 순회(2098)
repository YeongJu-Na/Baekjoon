import java.util.Arrays;
import java.util.StringTokenizer;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;

public class test{
	static int INF = 16*1000000, n;   //INF = Integer.MAX_VALUE로 하면 틀림(이값에 다른 값 추가되면 오버플로우발생
	static int[][] dp, arr;
	public static void main(String[] args)throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		arr = new int[n][n];
		for(int i=0;i<n;i++) {
			StringTokenizer st = new StringTokenizer(br.readLine()," ");
			for(int j=0;j<n;j++) {
				arr[i][j]=Integer.parseInt(st.nextToken());
			}
		}
		dp = new int[n][(1<<n)-1];    //행: 노드 번호, 열: 방문 상태 - 해당 상태에서 해당 노드 방문시 경로값
		for(int i=0;i<n;i++) {
			Arrays.fill(dp[i], INF);
		}
		System.out.println(tsp(0,1));   //시작점=0, 어떤 점에서 시작해도 같음(순환되므로)
		
	}
	static int tsp(int cur, int visit) {
		//조건 - 모든 도시를 다 거쳤을 경우
		if(visit == (1<<n)-1) {
			if(arr[cur][0]==0) return INF;	//0으로 돌아오지 못하는 경우
			return arr[cur][0];
		}
		if(dp[cur][visit]!=INF) return dp[cur][visit];
		for(int i=0;i<n;i++) {
			if((visit&(1<<i))!=0 ||arr[cur][i]==0) continue;	
			//visit된 번호이거나 해당 번호의 도시로 가는 경로 없는 경우
			int next = visit|(1<<i);
			dp[cur][visit] = Math.min(dp[cur][visit],tsp(i,next)+arr[cur][i]);
		}
		return dp[cur][visit];
		
	}
}
