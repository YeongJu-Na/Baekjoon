import java.util.Arrays;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {
	static int[] parent;
	public static void main(String[] args) throws IOException{
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st =new StringTokenizer(br.readLine()," ");
		int n=Integer.parseInt(st.nextToken());
		int m=Integer.parseInt(st.nextToken());
		parent = new int[n+1];
		Arrays.fill(parent,-1);       //자기 자신이 루트노드이면 음의 값이며, 절댓값은 그 집합의 크기 / 양수면 자식노드인 것
		for(int i=0;i<m;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int op=Integer.parseInt(st.nextToken());
			int x= Integer.parseInt(st.nextToken());
			int y= Integer.parseInt(st.nextToken());
			if(op==0) Union(x,y);
			else if(op==1) {
				System.out.println(isSameSet(x,y)?"YES":"NO");
			}
			
		}
		
	}
	static boolean isSameSet(int a, int b) {
		return (find(a)==find(b)?true:false);
	}
	static void Union(int a, int b) {	  //합치기
		int p1=find(a);
		int p2=find(b);
		if(p1==p2) return;          //각자 속한 집합의 루트노드가 같으면 합칠 필요x
		if(parent[p1]<parent[p2]) {     //p1의 음의 값이 더 큰 경우 
			parent[p1]+=parent[p2];       //집합의 크기가 더 큰 곳(p1)으로 합치기
			parent[p2]=a;
		}
		else {
			parent[p2]+=parent[p1];
			parent[p1]=b;
		}
	}
	static int find(int a) {	//해당 집합의 루트노드 번호 반환
		if(parent[a]<0) return a;
		return parent[a]=find(parent[a]);     //경로압축 -> 
	}
}
