import java.util.Queue;
import java.util.LinkedList;
import java.util.Deque;
import java.util.Stack;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;

public class test{
	public static void main(String[] args)throws IOException{
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		int a= Integer.parseInt(st.nextToken());
		int b= Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(br.readLine());
		
		ArrayList<Integer>[] arr = new ArrayList[n+1];      //1촌 관계 저장
		for(int i=0;i<n+1;i++) arr[i] = new ArrayList<>();
		
		for(int i=0;i<m;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			arr[x].add(y);
			arr[y].add(x);
		}
		Queue<Integer> q = new LinkedList<>();
		int[] chk = new int[n+1];           //a와의 촌수 계산 저장
		
		q.add(a);
		chk[a]=0;
		
		loop: while(!q.isEmpty()) {
			int cur = q.poll();
			for(int x: arr[cur]) {	    //cur과 1촌 사이인 번호들
				if(chk[x]!=0||x==a) continue;
				chk[x]=chk[cur]+1;          //cur까지의 촌수 +1
				if(x==b) break loop;
				q.add(x);
			}
		}
		System.out.println((chk[b]==0)?-1:chk[b]);
	}
}
