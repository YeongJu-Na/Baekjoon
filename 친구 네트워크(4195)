package baekjoon;
import java.util.Arrays;
import java.util.HashMap;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {
	static int[] parent;
	public static void main(String[] args) throws IOException{
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		while(t-->0) {
			int f = Integer.parseInt(br.readLine());
			int idx=0;
			parent = new int[f*2];
			Arrays.fill(parent, -1);
			HashMap<String,Integer> hm = new HashMap<>();
			for(int i=0;i<f;i++) {
				StringTokenizer st = new StringTokenizer(br.readLine()," ");
				String s1 = st.nextToken();
				String s2 = st.nextToken();
				if(!hm.containsKey(s1)) {   //새로운 이름마다 인덱스 지정
					hm.put(s1, idx++);
				}
				if(!hm.containsKey(s2)) {
					hm.put(s2, idx++);
				}
				System.out.println(union(hm.get(s1),hm.get(s2)));   //두 노드 합친 후 크기 반환
			}
			
		}
		
		
	}
	static int find(int a) {      //해당하는 집합의 루트노드(인덱스) 반환
		if(parent[a]<0) return a;
		return parent[a]=find(parent[a]);
	}
	static int union(int a, int b) {    //합치는 연산 후 크기 반환
		a=find(a);
		b=find(b);
		if(a==b) return -parent[a];     //이미 같은 집합인 경우
		if(parent[a]<parent[b]) {     //음의 값(집합의 크기)이 더 큰 쪽으로 합치기 
			parent[a]+=parent[b];
			parent[b]=a;
			return -parent[a];
		}
		else {
			parent[b]+=parent[a];
			parent[a]=b;
			return -parent[b];
		}
	}
}
