package baekjoon;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {

	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n= Integer.parseInt(br.readLine());
		Tree tree= new Tree();
		for(int i=0;i<n;i++) {
			StringTokenizer st= new StringTokenizer(br.readLine()," ");
			char p=st.nextToken().charAt(0);
			char l=st.nextToken().charAt(0);
			char r=st.nextToken().charAt(0);
			tree.addEdge(p, new Node(l), new Node(r));
		}
		tree.preOrder();
		System.out.println();
		tree.inOrder();
		System.out.println();
		tree.postOrder();
		
	}
}
class Node{
	char data;
	Node left=null;
	Node right=null;
	Node(char data){
		this.data=data;
	}
}
class Tree{
	Node root;
	Tree(){
		this.root= new Node('A');
	}
	Node find(char d) {
		Node cur=null;
		if(d==root.data) return root;
		if(root.left!=null) cur= find(d,root.left);
		if(cur==null&&root.right!=null) cur=find(d,root.right);
		return cur;
	}
	Node find(char d, Node n) {
		Node cur=null;
		if(n.data==d) return n;
		if(n.left!=null) cur=find(d,n.left);
		if(cur==null && n.right!=null) cur=find(d,n.right);
		return cur;
	}
	void addEdge(char data, Node l, Node r) {
		Node p= find(data);
		if(l.data!='.') p.left=l;
		if(r.data!='.') p.right=r;
		if(data=='A') this.root=p;
	}
	void preOrder() {
		preOrder(this.root);
	}
	void preOrder(Node n) {
		System.out.print(n.data);
		if(n.left!=null)preOrder(n.left);
		if(n.right!=null)preOrder(n.right);
	}
	void inOrder() {
		inOrder(this.root);
	}
	void inOrder(Node n) {
		if(n.left!=null) inOrder(n.left);
		System.out.print(n.data);
		if(n.right!=null) inOrder(n.right);
	}
	void postOrder() {
		postOrder(this.root);
	}
	void postOrder(Node n) {
		if(n.left!=null) postOrder(n.left);
		if(n.right!=null) postOrder(n.right);
		System.out.print(n.data);
	}
}
