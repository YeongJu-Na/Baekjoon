package baekjoon;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {
	static ArrayList<Integer>[] adj;
	static boolean[] visited;
	static boolean isCycle;
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int case_num=1;
		while(true) {
			StringTokenizer st = new StringTokenizer(br.readLine()," ");
			int n= Integer.parseInt(st.nextToken());
			int m= Integer.parseInt(st.nextToken());
			if(n==0&&m==0)break;
			adj = new ArrayList[n+1];
			
			for(int i=1;i<n+1;i++) adj[i]=new ArrayList<>();
			for(int i=0;i<m;i++) {
				st= new StringTokenizer(br.readLine()," ");
				int a= Integer.parseInt(st.nextToken());
				int b= Integer.parseInt(st.nextToken());
				adj[a].add(b);
				adj[b].add(a);
			}
			visited=new boolean[n+1];
			int t=0;
			for(int i=1;i<n+1;i++) {
				if(visited[i])continue;
				isCycle=false;
				dfs(i,0);
				if(!isCycle)t++;       //싸이클 형성x일 경우 트리개수(t) +1
			}
			if(t==1) System.out.println("Case "+case_num+": There is one tree.");
			else if(t<1) System.out.println("Case "+case_num+": No trees.");
			else System.out.println("Case "+case_num+": A forest of "+t+" trees.");
			case_num++;
		}
	}
	static void dfs(int start, int bef) {
		visited[start]=true;
		
		for(int x:adj[start]){
			if(x!=bef) {                  //바로 직전 간선은 고려x
				if(visited[x]) isCycle=true;
				else dfs(x,start);
			}
		}
	}
}
