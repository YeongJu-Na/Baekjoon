import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main{
    public static void main(String args[])throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n=Integer.parseInt(st.nextToken());
        int m=Integer.parseInt(st.nextToken());
        int k=Integer.parseInt(st.nextToken());
        int x=Integer.parseInt(st.nextToken());

        LinkedList<Integer>[] adj = new LinkedList[n+1];
        boolean[] visited = new boolean[n+1];   //이미 최단 거리가 정해진 경우 true

        Queue<Integer> q = new LinkedList<>();
        for(int i=1;i<n+1;i++) adj[i]=new LinkedList<>();   //인접 노드 정보 담기

        for(int i=0;i<m;i++){
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            adj[a].add(b);
        }
        q.add(x);
        visited[x]=true;
        int ans = 1;  // k번까지만 돌기 위한 카운트
        int size = 1;   // 초기 큐 사이즈
        while(!q.isEmpty()&&ans<=k){  // 루프마다 거리가 ans인 노드들이 큐로 들어감
            for(int i=0;i<size;i++){
                int cur = q.poll();
                for(int node:adj[cur]){
                    if(visited[node]) continue;
                    visited[node]=true;
                    q.add(node);
                }
            }
            size = q.size();
            ans++;
        }
        if(size==0) System.out.println(-1);
        else{   // 큐에 있는 값 정렬
            int[] arr =new int[size];
            int idx=0;
            while(!q.isEmpty()){
                arr[idx++]=q.poll();
            }
            Arrays.sort(arr);
            for(int i=0;i<size;i++){
                System.out.println(arr[i]);
            }
        }
    }
}
////////////////// 풀이 2 - 모두 방문해도 O(n+m)< 10^7, 제한시간 내 가능 /////
//Line 15~
        ArrayList<Integer>[] adj = new ArrayList[n+1];
        int[] dist = new int[n+1];
        Queue<Integer> q = new LinkedList<>();
        for(int i=1;i<n+1;i++) adj[i]=new ArrayList<>();

        for(int i=0;i<m;i++){
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            adj[a].add(b);
        }
        q.add(x);
        Arrays.fill(dist,-1);
        dist[x]=0;

        while(!q.isEmpty()){
            int cur = q.poll();
            for(int node: adj[cur]){
                if(dist[node]==-1){
                    dist[node]=dist[cur]+1;
                    q.add(node);
                }
            }
        }
        boolean ch=false;
        for(int i=1;i<n+1;i++){
            if(dist[i]==k){
                System.out.println(i);
                ch=true;
            }
        }
        if(!ch) System.out.println(-1);
