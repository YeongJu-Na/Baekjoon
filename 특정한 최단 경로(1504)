import java.util.PriorityQueue;
import java.util.StringTokenizer;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;

public class test{
	static int N;
	static ArrayList<Node>[] adj;
	static int[] dist;
	static final int INF=200000000;
	public static void main(String[] args)throws IOException{
		
		BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st =new StringTokenizer(br.readLine()," ");
		N=Integer.parseInt(st.nextToken());
		int E=Integer.parseInt(st.nextToken());
		adj = new ArrayList[N+1];
		dist =new int[N+1];
		
		for(int i=1;i<N+1;i++) {
			adj[i]=new ArrayList<>();
		}
		
		for(int i=0;i<E;i++) {
			st=new StringTokenizer(br.readLine()," ");
			int u= Integer.parseInt(st.nextToken());
			int v= Integer.parseInt(st.nextToken());
			int c= Integer.parseInt(st.nextToken());
			adj[u].add(new Node(v,c));
			adj[v].add(new Node(u,c));	
		}
		st=new StringTokenizer(br.readLine()," ");
		int r1 = Integer.parseInt(st.nextToken());
		int r2 = Integer.parseInt(st.nextToken());
		
		int ans1=0;
		int ans2=0;
		
		//ans1 = 1-r1-r2-N
		//ans2 = 1-r2-r1-N
		dijk(1);
		ans1 += dist[r1];
		ans2 += dist[r2];
		
		dijk(r2);
		ans1+=dist[N];
		ans2+=dist[r1];
		
		dijk(r1);
		ans1+=dist[r2];
		ans2+=dist[N];
		
		System.out.println(Math.min(ans1, ans2)>=INF?-1:Math.min(ans1, ans2));
		
	}
	static void dijk(int start) {
		
		boolean[] visited=new boolean[N+1];
		PriorityQueue<Node> pq = new PriorityQueue<>();
		Arrays.fill(dist, INF);
		dist[start]=0;
		pq.add(new Node(start,0));
		
		while(!pq.isEmpty()) {
			Node cur= pq.poll();
			if(visited[cur.vertex]) continue;
			visited[cur.vertex]=true;
			
			for(Node next:adj[cur.vertex]) {
				if(dist[cur.vertex] + next.cost < dist[next.vertex]) {
					dist[next.vertex]=dist[cur.vertex]+ next.cost;
					
				}
				pq.add(new Node(next.vertex,dist[next.vertex]));
			}
		}
		return;
	}
}
class Node implements Comparable<Node>{
	int vertex;
	int cost;
	Node(int vertex, int cost){
		this.vertex=vertex;
		this.cost=cost;
	}
	public int compareTo(Node o) {
		return this.cost-o.cost;
	}
}
