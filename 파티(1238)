import java.util.Arrays;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;

public class test{
	static int[] dist;
	static ArrayList<Node>[] adj;
	static int N;
	static int x;
	static final int INF=100000;
	public static void main(String[] args)throws IOException{
		
		BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st =new StringTokenizer(br.readLine()," ");
		N =Integer.parseInt(st.nextToken());
		int m =Integer.parseInt(st.nextToken());
		x =Integer.parseInt(st.nextToken());
		dist=new int[N+1];
		adj = new ArrayList[N+1];
		for(int i=1;i<N+1;i++) adj[i]=new ArrayList<>();
		
		for(int i=0;i<m;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int u=Integer.parseInt(st.nextToken());
			int v=Integer.parseInt(st.nextToken());
			int c=Integer.parseInt(st.nextToken());
			adj[u].add(new Node(v,c));
		}
		int[] ans = new int[N+1];
		int max = 0;
		
		dijk(x);
		for(int i=1;i<N+1;i++) ans[i]=dist[i];
		for(int i=1;i<N+1;i++) {
			dijk(i);
			ans[i] =ans[i] + dist[x];
			if(ans[i]>max) max=ans[i];
		}
		System.out.println(max);
		
	}
	static void dijk(int start) {
		
		boolean[] visited=new boolean[N+1];
		PriorityQueue<Node> pq = new PriorityQueue<>();
		Arrays.fill(dist, INF);
		dist[start]=0;
		pq.add(new Node(start,0));
		
		while(!pq.isEmpty()) {
			Node cur= pq.poll();
			if(visited[cur.vertex]) continue;
			visited[cur.vertex]=true;
			
			for(Node next:adj[cur.vertex]) {
				if(dist[cur.vertex] + next.cost < dist[next.vertex]) {
					dist[next.vertex]=dist[cur.vertex]+ next.cost;
					
				}
				pq.add(new Node(next.vertex,dist[next.vertex]));
			}
			if(start!=x && cur.vertex==x) return;    //다른 마을에서 x로 가는 최단경로 구하는 경우, x노드 탐색 후 return->시간
		}
		return;
	}
}
class Node implements Comparable<Node>{
	int vertex;
	int cost;
	Node(int vertex, int cost){
		this.vertex=vertex;
		this.cost=cost;
	}
	public int compareTo(Node o) {
		return this.cost-o.cost;
	}
}
